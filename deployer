#!/bin/bash
# positive.codes Yii 2 deployer v3.4.2
# ========================================================
# -h, --help for help

# SETTINGS
# ========================================================

# project host folder name
HOST=""

# default environment name for Yii 2 init
ENV="Development"

# SVN/GIT credentials
REPO_TYPE="GIT"
REPO_URL=''
REPO_USER=''
REPO_PASS=''

# SVN/GIT branch path for development release
DEV_BRANCH='master'

# folders owner and group if needed (use chown syntax)
RIGHTS=""

# project name (just for display)
PROJECT="YII 2"

# production releases folder name
R_FOLDER="releases"

# development current release folder name
DC_FOLDER="dev_current"

# development next release folder name
DN_FOLDER="dev_next"

# composer folder name for vendor storage
C_FOLDER="composer"

# temporary composer folder name for vendor storage
C_TEMP_FOLDER="composer_temp"

# events scripts
BEFORE_START=""
AFTER_END=""
BEFORE_DOWNLOAD=""
AFTER_DOWNLOAD=""
BEFORE_DEPLOY=""
AFTER_DEPLOY=""
BEFORE_DEPLOYDEV=""
AFTER_DEPLOYDEV=""
BEFORE_INIT=""
AFTER_INIT=""
BEFORE_MIGRATE=""
AFTER_MIGRATE=""
BEFORE_UPDATE=""
AFTER_UPDATE=""
BEFORE_ROLLBACK=""
AFTER_ROLLBACK=""
BEFORE_INSTALL=""
AFTER_INSTALL=""
BEFORE_SWITCH=""
AFTER_SWITCH=""

# load cfg settings
# ========================================================
if [[ -e "./deployer.cfg" ]]; then
    source "./deployer.cfg"
fi

# script variables
# ========================================================
VERSION=""
VERBOSE=0
USING_TEMPORARY_COMPOSER=0
MODE=0
DELETE_ENVS=1
SKIP_MIG=0

# generate line with dots
LINE() {
    local LINE=$(printf '%0.1s' "."{1..60})
    printf "%s%s" "$1" "${LINE:${#1}}"
}

# cleans temporary folder
END_MARKER() {
    if [[ ${USING_TEMPORARY_COMPOSER} -eq 1 ]]; then
        LINE " > deleting temporary composer folder"
        if rm -rf "./${C_TEMP_FOLDER}"
        then
            echo "deleted"
        else
            echo "ERROR"
        fi
    fi
    if [[ ${DELETE_ENVS} -eq 1 ]]; then
        LINE " > deleting environments folder"
        if rm -rf "./${HOST}/environments"
        then
            echo "deleted"
        else
            echo "ERROR"
        fi
    fi
    echo "FINISHED at $(date +"%r")."
    RUN_EVENT "AFTER_END"
}

CREATE_FOLDER() {
    LINE "$1"
    if mkdir "$2"
    then
        if chmod 0775 "$2"
        then
            if [[ "$RIGHTS" != "" ]]; then
                if chown ${RIGHTS} "$2"
                then
                    :
                else
                    echo "ERROR"
                    return 0
                fi
            fi
            echo "created"
            return 1
        else
            echo "ERROR"
        fi
    fi
    return 0
}

RUN_EVENT() {
    local CMD=${!1}
    if [[ "${CMD}" != "" ]]; then
        eval "${CMD}"
    fi
}

INIT_RELEASE_FOLDER() {
    if [[ ! -d "./${R_FOLDER}"  ]]; then
        CREATE_FOLDER " > initialing releases folder" "./${R_FOLDER}"
        if [[ $? -eq 0 ]]; then
            return 0
        fi
    fi
    LINE " > checking release ${1} folder"
    if [[ -d "./${R_FOLDER}/$1" ]]; then
        echo "ALREADY EXISTS! > exit with error"
    else
        echo "ok"
        return 1
    fi
    return 0
}

INIT_DEVELOPMENT_FOLDER() {
    if [[ ! -d "./${R_FOLDER}"  ]]; then
        CREATE_FOLDER " > initialing releases folder" "./${R_FOLDER}"
        if [[ $? -eq 0 ]]; then
            return 0
        fi
    fi
    if [[ -d "./${R_FOLDER}/${DN_FOLDER}" ]]; then
        LINE " > deleting old next development release folder"
        if rm -rf "./${R_FOLDER}/${DN_FOLDER}"
        then
            echo "deleted"
        else
            return 0
        fi
    fi
    return 1
}

CHECK_RELEASE_FOLDER() {
    LINE " > checking release ${1} folder"
    if [[ ! -d "./${R_FOLDER}/$1" ]]; then
        echo "NOT FOUND! > exit with error"
    else
        echo "ok"
        return 1
    fi
    return 0
}

# exporting production release SVN folder
DOWNLOAD_PROD_RELEASE_SVN() {
    LINE " > exporting SVN snapshot"
    local CMD="svn export -q \"https://${REPO_URL}/tags/${1}\" \"./${R_FOLDER}/${1}\" --no-auth-cache --non-interactive --trust-server-cert --username \"${REPO_USER}\" --password '${REPO_PASS}'"
    if [[ ${VERBOSE} -eq 1 ]]; then
        CMD="svn export \"https://${REPO_URL}/tags/${1}\" \"./${R_FOLDER}/${1}\" --no-auth-cache --non-interactive --trust-server-cert --username \"${REPO_USER}\" --password '${REPO_PASS}'"
    fi
    if eval "${CMD}"
    then
        return 1
    fi
    return 0
}

# cloning production release GIT folder
DOWNLOAD_PROD_RELEASE_GIT() {
    LINE " > cloning GIT branch"
    local CMD="git clone -b \"${1}\" -q -c advice.detachedHead=false --depth 1 'https://${REPO_USER}:${REPO_PASS}@${REPO_URL}' \"./${R_FOLDER}/${1}\""
    if [[ ${VERBOSE} -eq 1 ]]; then
        CMD="git clone -b \"${1}\" -v --depth 1 'https://${REPO_USER}:${REPO_PASS}@${REPO_URL}' \"./${R_FOLDER}/${1}\""
    fi
    if eval "${CMD}"
    then
        return 1
    fi
    return 0
}

# downloads production release folder
DOWNLOAD_PROD_RELEASE() {
    RUN_EVENT "BEFORE_DOWNLOAD"
    if [[ "$REPO_TYPE" = "GIT" ]]; then
        DOWNLOAD_PROD_RELEASE_GIT "$1"
        if [[ $? -eq 0 ]]; then
            RUN_EVENT "AFTER_DOWNLOAD"
            return 0
        fi
        rm -rf "./${R_FOLDER}/${1}/.git"
        RUN_EVENT "AFTER_DOWNLOAD"
    elif [[ "$REPO_TYPE" = "SVN" ]]; then
        DOWNLOAD_PROD_RELEASE_SVN "$1"
        if [[ $? -eq 0 ]]; then
            RUN_EVENT "AFTER_DOWNLOAD"
            return 0
        fi
        RUN_EVENT "AFTER_DOWNLOAD"
    else
        echo " > UNSUPPORTED REPO TYPE: only GIT and SVN are allowed! > exit with error"
        return 0
    fi
    echo "done"
    if [[ "$RIGHTS" != "" ]]; then
        chown -R ${RIGHTS} "./${R_FOLDER}/${1}"
    fi
    return 1
}

# exporting development release SVN folder
DOWNLOAD_DEV_RELEASE_SVN() {
    LINE " > exporting development SVN snapshot"
    local CMD="svn export -q \"https://${REPO_URL}/${DEV_BRANCH}\" \"./${R_FOLDER}/${DN_FOLDER}\" --no-auth-cache --non-interactive --trust-server-cert --username \"${REPO_USER}\" --password '${REPO_PASS}'"
    if [[ ${VERBOSE} -eq 1 ]]; then
        CMD="svn export \"https://${REPO_URL}/${DEV_BRANCH}\" \"./${R_FOLDER}/${DN_FOLDER}\" --no-auth-cache --non-interactive --trust-server-cert --username \"${REPO_USER}\" --password '${REPO_PASS}'"
    fi
    if eval "${CMD}"
    then
        return 1
    fi
    return 0
}

# cloning development release GIT folder
DOWNLOAD_DEV_RELEASE_GIT() {
    LINE " > cloning development GIT branch"
    local CMD="git clone -b \"${DEV_BRANCH}\" -q -c advice.detachedHead=false --depth 1 'https://${REPO_USER}:${REPO_PASS}@${REPO_URL}' \"./${R_FOLDER}/${DN_FOLDER}\""
    if [[ ${VERBOSE} -eq 1 ]]; then
        CMD="git clone -b \"${DEV_BRANCH}\" -v --depth 1 'https://${REPO_USER}:${REPO_PASS}@${REPO_URL}' \"./${R_FOLDER}/${DN_FOLDER}\""
    fi
    if eval "${CMD}"
    then
        return 1
    fi
    return 0
}

# downloads development release folder
DOWNLOAD_DEV_RELEASE() {
    RUN_EVENT "BEFORE_DOWNLOAD"
    if [[ "$REPO_TYPE" = "GIT" ]]; then
        DOWNLOAD_DEV_RELEASE_GIT
        if [[ $? -eq 0 ]]; then
            RUN_EVENT "AFTER_DOWNLOAD"
            return 0
        fi
        rm -rf "./${R_FOLDER}/${DN_FOLDER}/.git"
        RUN_EVENT "AFTER_DOWNLOAD"
    elif [[ "$REPO_TYPE" = "SVN" ]]; then
        DOWNLOAD_DEV_RELEASE_SVN
        if [[ $? -eq 0 ]]; then
            RUN_EVENT "AFTER_DOWNLOAD"
            return 0
        fi
        RUN_EVENT "AFTER_DOWNLOAD"
    else
        echo " > UNSUPPORTED REPO TYPE: only GIT and SVN are allowed! > exit with error"
        return 0
    fi
    echo "done"
    if [[ "$RIGHTS" != "" ]]; then
        chown -R ${RIGHTS} "./${R_FOLDER}/${DN_FOLDER}"
    fi
    return 1
}

# installs composer dependencies
COMPOSER_INSTALL() {
    RUN_EVENT "BEFORE_INSTALL"
    LINE " > installing composer dependencies"
    if [[ ${USING_TEMPORARY_COMPOSER} -eq 1 ]]; then
        cd "./${C_TEMP_FOLDER}"
    else
        cd "./${C_FOLDER}"
    fi
    local CMD="composer install -q"
    if [[ ${VERBOSE} -eq 1 ]]; then
        CMD="composer install"
    fi
    local NODEV=""
    if [[ "$ENV" = "Production" ]]; then
        NODEV="--no-dev --classmap-authoritative"
    fi
    if eval "${CMD} ${NODEV}"
    then
        echo "installed"
        cd ..
        RUN_EVENT "AFTER_INSTALL"
        return 1
    fi
    cd ..
    RUN_EVENT "AFTER_INSTALL"
    return 0
}

# checks vendor folder
CHECK_VENDOR() {
    local NEW_LOCK_PRESENT=0
    local OLD_LOCK_PRESENT=0
    local OLD_JSON_PRESENT=0
    if [[ ! -d "./${C_FOLDER}" ]]; then
        CREATE_FOLDER " > creating composer folder" "./${C_FOLDER}"
        if [[ $? -eq 0 ]]; then
            return 0
        fi
    else
        if [[ -e "./${C_FOLDER}/composer.json" ]]; then
            OLD_JSON_PRESENT=1
        fi
        if [[ -e "./${C_FOLDER}/composer.lock" ]]; then
            OLD_LOCK_PRESENT=1
        fi
    fi
    LINE " > checking release ${1} composer.json file"
    if [[ ! -e "./${R_FOLDER}/$1/composer.json" ]]; then
        echo "NO COMPOSER.JSON FOUND! > exit with error"
        return 0
    else
        echo "ok"
    fi
    LINE " > checking release ${1} composer.lock file"
    if [[ -e "./${R_FOLDER}/$1/composer.lock" ]]; then
        NEW_LOCK_PRESENT=1
        echo "ok"
    else
        echo "no lock file"
    fi
    if [[ ${OLD_JSON_PRESENT} -eq 0 ]]; then
        LINE " > copying composer.json from release ${1} folder"
        if cp "./${R_FOLDER}/$1/composer.json" "./${C_FOLDER}"
        then
            echo "copied"
            if [[ ${OLD_LOCK_PRESENT} -eq 1 ]]; then
                LINE " > removing old composer.lock from composer folder"
                if rm "./${C_FOLDER}/composer.lock"
                then
                    echo "ok"
                else
                    echo "CAN NOT DELETE COMPOSER.LOCK! > exit with error"
                    return 0
                fi
            fi
            if [[ ${NEW_LOCK_PRESENT} -eq 1 ]]; then
                LINE " > copying composer.lock from release ${1} folder"
                if cp "./${R_FOLDER}/$1/composer.lock" "./${C_FOLDER}"
                then
                    echo "ok"
                else
                    echo "CAN NOT DELETE COMPOSER.LOCK! > exit with error"
                    return 0
                fi
            fi
            COMPOSER_INSTALL
            if [[ $? -eq 0 ]]; then
                return 0
            fi
            return 1
        fi
    else
        local INSTALL_REQUIRED=0
        LINE " > comparing deployed and vendor composer.json versions"
        if [[ $(stat -c%s "./${C_FOLDER}/composer.json") -eq $(stat -c%s "./${R_FOLDER}/${1}/composer.json") ]]; then
            echo "matching"
        else
            echo "different"
            INSTALL_REQUIRED=1
        fi
        if [[ ${INSTALL_REQUIRED} -eq 0 ]]; then
            if [[ ${NEW_LOCK_PRESENT} -eq 0 ]]; then
                INSTALL_REQUIRED=1
            else
                if [[ ${OLD_LOCK_PRESENT} -eq 0 ]]; then
                    INSTALL_REQUIRED=1
                else
                    LINE " > comparing deployed and vendor composer.lock versions"
                    if [[ $(stat -c%s "./${C_FOLDER}/composer.lock") -eq $(stat -c%s "./${R_FOLDER}/${1}/composer.lock") ]]; then
                        echo "matching"
                    else
                        echo "different"
                        INSTALL_REQUIRED=1
                    fi
                fi
            fi
        fi
        if [[ ${INSTALL_REQUIRED} -eq 0 ]]; then
            return 1
        else
            CREATE_FOLDER " > creating temporary composer folder" "./${C_TEMP_FOLDER}"
            if [[ $? -eq 0 ]]; then
                return 0
            fi
            USING_TEMPORARY_COMPOSER=1
            LINE " > copying composer.json from release ${1} folder"
            if cp "./${R_FOLDER}/${1}/composer.json" "./${C_TEMP_FOLDER}"
            then
                echo "copied"
                if [[ ${NEW_LOCK_PRESENT} -eq 1 ]]; then
                    LINE " > copying composer.lock from release ${1} folder"
                    if cp "./${R_FOLDER}/${1}/composer.lock" "./${C_TEMP_FOLDER}"
                    then
                        echo "copied"
                    else
                        return 0
                    fi
                fi
                COMPOSER_INSTALL
                if [[ $? -eq 0 ]]; then
                    return 0
                fi
                return 1
            fi
        fi
    fi
    return 0
}

# symlinks folders
SYMLINK() {
    LINE " > symlinking vendor folder to release $1"
    local CMD="ln -s \"./../../${C_FOLDER}/vendor\" \"./${R_FOLDER}/${1}/vendor\""
    if [[ ${USING_TEMPORARY_COMPOSER} -eq 1 ]]; then
        CMD="ln -s \"./../../${C_TEMP_FOLDER}/vendor\" \"./${R_FOLDER}/${1}/vendor\""
    fi
    if eval "${CMD}"
    then
        echo "done"
        return 1
    fi
    return 0
}

# starts Yii 2 init
INIT() {
    RUN_EVENT "BEFORE_INIT"
    LINE " > running Yii 2 init for ${ENV}"
    local CMD="php \"./${R_FOLDER}/${1}/init\" --env=${ENV} --overwrite=All >/dev/null"
    if [[ ${VERBOSE} -eq 1 ]]; then
        CMD="php \"./${R_FOLDER}/${1}/init\" --env=${ENV} --overwrite=All"
    fi
    if eval "${CMD}"
    then
        echo "done"
        RUN_EVENT "AFTER_INIT"
        return 1
    fi
    RUN_EVENT "AFTER_INIT"
    return 0
}

# starts Yii 2 migration (up)
MIGRATE() {
    if [[ ${SKIP_MIG} -eq 1 ]]; then
        echo " > skipping migration"
        return 1
    else
        RUN_EVENT "BEFORE_MIGRATE"
        LINE " > running Yii 2 migration"
        local CMD="php \"./${R_FOLDER}/${1}/yii\" migrate --interactive=0 >/dev/null"
        if [[ ${VERBOSE} -eq 1 ]]; then
            CMD="php \"./${R_FOLDER}/${1}/yii\" migrate"
        fi
        if eval "${CMD}"
        then
            echo "done"
            RUN_EVENT "AFTER_MIGRATE"
            return 1
        else
            echo "failed"
            RUN_EVENT "AFTER_MIGRATE"
            return 0
        fi
    fi
}

# switches temporary composer folder
SWITCH_TEMP_COMPOSER() {
    if [[ ${USING_TEMPORARY_COMPOSER} -eq 1 ]]; then
        if rm "./${R_FOLDER}/${1}/vendor"
        then
            if rm -rf "./${C_FOLDER}"
            then
                if cp -a "./${C_TEMP_FOLDER}" "./${C_FOLDER}"
                then
                    if ln -s "./../../${C_FOLDER}/vendor" "./${R_FOLDER}/${1}/vendor"
                    then
                        return 1
                    fi
                fi
            fi
        fi
    else
        return 1
    fi
    return 0
}

# symlinks release
SYMLINK_RELEASE() {
    SWITCH_TEMP_COMPOSER "$1"
    if [[ $? -eq 1 ]]; then
        if ln -s "./${R_FOLDER}/${1}" "./${HOST}"
        then
            echo "released"
            return 1
        fi
    fi
    return 0
}

# creates backup
BACKUP_CREATE() {
    LINE " > creating host symlink and vendor backup"
    if cp -a "./${HOST}" "./${HOST}_backup"
    then
        if cp -a "./${C_FOLDER}/vendor" "./${C_FOLDER}/vendor_backup"
        then
            echo "done"
            return 1
        fi
    fi
    return 0
}

# deletes backup
BACKUP_DELETE() {
    LINE " > deleting host symlink and vendor backup"
    if rm "./${HOST}_backup"
    then
        if rm -rf "./${C_FOLDER}/vendor_backup"
        then
            echo "deleted"
        fi
    fi
}

# recovers backup
BACKUP_RECOVER() {
    LINE " > recovering host symlink and vendor from backup"
    if [[ -d "./${C_FOLDER}/vendor" ]]; then
        rm -rf "./${C_FOLDER}/vendor"
    fi
    if cp -a "./${C_FOLDER}/vendor_backup" "./${C_FOLDER}/vendor"
    then
        if cp -a "./${HOST}_backup" "./${HOST}"
        then
            echo "recovered"
        fi
    fi
}

# switches production releases
SWITCH() {
    RUN_EVENT "BEFORE_SWITCH"
    if [[ ! -h "./${HOST}" ]]; then
        LINE " > symlinking ${HOST} to release $1"
        SYMLINK_RELEASE "$1"
        if [[ $? -eq 1 ]]; then
            RUN_EVENT "AFTER_SWITCH"
            return 1
        fi
    else
        BACKUP_CREATE
        if [[ $? -eq 1 ]]; then
            LINE " > switching to release $1"
            if rm "./${HOST}"
            then
                SYMLINK_RELEASE "$1"
                if [[ $? -eq 1 ]]; then
                    BACKUP_DELETE
                    RUN_EVENT "AFTER_SWITCH"
                    return 1
                else
                    BACKUP_RECOVER
                fi
            fi
            BACKUP_DELETE
        fi
    fi
    RUN_EVENT "AFTER_SWITCH"
    return 0
}

# moves next development release to current
MOVEDEV() {
    if [[ -d "./${R_FOLDER}/${DC_FOLDER}" ]]; then
        LINE " > removing old current development release"
        if rm -rf "./${R_FOLDER}/${DC_FOLDER}"
        then
            echo "done"
        else
            return 0
        fi
    fi
    LINE " > moving next development release to current"
    if cp -a "./${R_FOLDER}/${DN_FOLDER}" "./${R_FOLDER}/${DC_FOLDER}"
    then
        echo "done"
        if rm -rf "./${R_FOLDER}/${DN_FOLDER}"
        then
            :
        else
            echo "ERROR"
        fi
    else
        return 0
    fi
    return 1
}

# deploys tag
DEPLOY() {
    RUN_EVENT "BEFORE_START"
    RUN_EVENT "BEFORE_DEPLOY"
    echo "STARTING deployment of ${PROJECT} version ${VERSION} at $(date +"%r")."
    INIT_RELEASE_FOLDER "$VERSION"
    if [[ $? -eq 1 ]]; then
        DOWNLOAD_PROD_RELEASE "$VERSION"
        if [[ $? -eq 1 ]]; then
            CHECK_VENDOR "$VERSION"
            if [[ $? -eq 1 ]]; then
                SYMLINK "$VERSION"
                if [[ $? -eq 1 ]]; then
                    INIT "$VERSION"
                    if [[ $? -eq 1 ]]; then
                        MIGRATE "$VERSION"
                        if [[ $? -eq 1 ]]; then
                            SWITCH "$VERSION"
                        fi
                    fi
                fi
            fi
        fi
    fi
    RUN_EVENT "AFTER_DEPLOY"
    END_MARKER
}

# rollbacks tag
ROLLBACK() {
    RUN_EVENT "BEFORE_START"
    RUN_EVENT "BEFORE_ROLLBACK"
    echo "STARTING rollback of ${PROJECT} to version ${VERSION} at $(date +"%r")."
    CHECK_RELEASE_FOLDER "$VERSION"
    if [[ $? -eq 1 ]]; then
        CHECK_VENDOR "$VERSION"
        if [[ $? -eq 1 ]]; then
            SYMLINK "$VERSION"
            if [[ $? -eq 1 ]]; then
                SWITCH "$VERSION"
            fi
        fi
    fi
    RUN_EVENT "AFTER_ROLLBACK"
    END_MARKER
}

# deploys development
DEPLOYDEV() {
    RUN_EVENT "BEFORE_START"
    RUN_EVENT "BEFORE_DEPLOYDEV"
    echo "STARTING deployment of ${PROJECT} development version at $(date +"%r")."
    INIT_DEVELOPMENT_FOLDER
    if [[ $? -eq 1 ]]; then
        DOWNLOAD_DEV_RELEASE
        if [[ $? -eq 1 ]]; then
            CHECK_VENDOR "$DN_FOLDER"
            if [[ $? -eq 1 ]]; then
                MOVEDEV
                if [[ $? -eq 1 ]]; then
                    SYMLINK "$DC_FOLDER"
                    if [[ $? -eq 1 ]]; then
                        INIT "$DC_FOLDER"
                        if [[ $? -eq 1 ]]; then
                            MIGRATE "$DC_FOLDER"
                            if [[ $? -eq 1 ]]; then
                                SWITCH "$DC_FOLDER"
                            fi
                        fi
                    fi
                fi
            fi
        fi
    fi
    RUN_EVENT "AFTER_DEPLOYDEV"
    END_MARKER
}

# creates config file
CREATECONFIG() {
    echo "This will create new deployer.cfg file and overwrite existing one."
    read -p "Are you sure? (Y/n) " -n 1 -r
    if ! [[ $REPLY =~ ^[Nn]$ ]]
    then
        echo ""
        LINE " > creating deployer.cfg file"
        echo "# project host folder name" > ./deployer.cfg
        echo "HOST=\"change me\"" >> ./deployer.cfg
        echo "" >> ./deployer.cfg
        echo "# default environment name for Yii 2 init" >> ./deployer.cfg
        echo "ENV=\"change me\"" >> ./deployer.cfg
        echo "" >> ./deployer.cfg
        echo "# SVN/GIT credentials" >> ./deployer.cfg
        echo "REPO_TYPE='GIT'" >> ./deployer.cfg
        echo "REPO_URL='change me (omit https:// part)'" >> ./deployer.cfg
        echo "REPO_USER='change me'" >> ./deployer.cfg
        echo "REPO_PASS='change me'" >> ./deployer.cfg
        echo "" >> ./deployer.cfg
        echo "# SVN/GIT branch path for development release" >> ./deployer.cfg
        echo "DEV_BRANCH='master'" >> ./deployer.cfg
        echo "" >> ./deployer.cfg
        echo "# folders owner and group if needed (use chown syntax)" >> ./deployer.cfg
        echo "RIGHTS=''" >> ./deployer.cfg
        echo "" >> ./deployer.cfg
        echo "# project name (just for display)" >> ./deployer.cfg
        echo "PROJECT=\"change me\"" >> ./deployer.cfg
        echo "" >> ./deployer.cfg
        echo "# events scripts" >> ./deployer.cfg
        echo "BEFORE_START=\"\"" >> ./deployer.cfg
        echo "AFTER_END=\"\"" >> ./deployer.cfg
        echo "BEFORE_DOWNLOAD=\"\"" >> ./deployer.cfg
        echo "AFTER_DOWNLOAD=\"\"" >> ./deployer.cfg
        echo "BEFORE_DEPLOY=\"\"" >> ./deployer.cfg
        echo "AFTER_DEPLOY=\"\"" >> ./deployer.cfg
        echo "BEFORE_DEPLOYDEV=\"\"" >> ./deployer.cfg
        echo "AFTER_DEPLOYDEV=\"\"" >> ./deployer.cfg
        echo "BEFORE_INIT=\"\"" >> ./deployer.cfg
        echo "AFTER_INIT=\"\"" >> ./deployer.cfg
        echo "BEFORE_MIGRATE=\"\"" >> ./deployer.cfg
        echo "AFTER_MIGRATE=\"\"" >> ./deployer.cfg
        echo "BEFORE_UPDATE=\"\"" >> ./deployer.cfg
        echo "AFTER_UPDATE=\"\"" >> ./deployer.cfg
        echo "BEFORE_ROLLBACK=\"\"" >> ./deployer.cfg
        echo "AFTER_ROLLBACK=\"\"" >> ./deployer.cfg
        echo "BEFORE_INSTALL=\"\"" >> ./deployer.cfg
        echo "AFTER_INSTALL=\"\"" >> ./deployer.cfg
        echo "BEFORE_SWITCH=\"\"" >> ./deployer.cfg
        echo "AFTER_SWITCH=\"\"" >> ./deployer.cfg
        echo "done"
    fi
    echo ""
}

# checks required permissions
CHECKPERM() {
    if ! [[ -x "$1" ]]; then
        return 0
    elif ! [[ -r "$1" ]]; then
        return 0
    elif ! [[ -r "${1}/deployer" ]]; then
        return 0
    elif ! [[ -x "/usr/local/bin/" ]]; then
        return 0
    elif ! [[ -w "/usr/local/bin/" ]]; then
        return 0
    fi
    return 1
}

# updates deployer
UPDATE() {
    RUN_EVENT "BEFORE_UPDATE"
    echo " > updating deployer in global mode:"
    composer global update positivecodes/deployer
    local VENDOR=$(composer global config vendor-dir --absolute)
    local PERM=""
    CHECKPERM "$VENDOR/positivecodes/deployer"
    if [[ $? -eq 0 ]]; then
        PERM="sudo"
    fi
    echo " > copying deployer file to /usr/local/bin/"
    ${PERM} cp -u ${VENDOR}/positivecodes/deployer/deployer /usr/local/bin/
    echo " > setting deployer file executable"
    ${PERM} chmod +x /usr/local/bin/deployer
    echo " > deployer updated"
    RUN_EVENT "AFTER_UPDATE"
}

# starts script
START() {
    if [[ ${MODE} -eq 6 ]]; then
        CREATECONFIG
    elif [[ ${MODE} -eq 7 ]]; then
        trap UPDATE 0
    elif [[ ${MODE} -eq 1 ]]; then
        echo "NAME"
        echo ""
        echo "    deployer v3.4.2 - deploy SVN/GIT version of Yii 2 project"
        echo ""
        echo "SYNOPSIS"
        echo ""
        echo "    deployer -d TAG [-v] [-s] [-e ENV]"
        echo "    deployer -r TAG [-v] [-e ENV]"
        echo "    deployer -dev [-v] [-s] [-e ENV]"
        echo "    deployer -b BRANCH [-v] [-s] [-e ENV]"
        echo "    deployer -h"
        echo "    deployer -c"
        echo "    deployer -u"
        echo ""
        echo "DESCRIPTION"
        echo ""
        echo "    Deploys the target TAG version of Yii 2 project or rollbacks to the target TAG version."
        echo "    Creates the releases and composer folders. Deployed version is stored in the releases"
        echo "    folder under the TAG name. Composer folder stores the vendor folder with composer "
        echo "    dependencies. TAG version is SVN imported or GIT cloned using provided credentials."
        echo "    Deployed or rollbacked version is symlinked to the Apache host target folder."
        echo ""
        echo "    -d TAG, --deploy TAG"
        echo "        deploy TAG version"
        echo ""
        echo "    -r TAG, --rollback TAG"
        echo "        rollback to TAG version"
        echo ""
        echo "    -dev"
        echo "        deploy development version"
        echo ""
        echo "    -b BRANCH, --branch BRANCH"
        echo "        deploy development version from BRANCH branch"
        echo ""
        echo "    -v, --verbose"
        echo "        runs the script in verbose mode where output is visible"
        echo ""
        echo "    -s, --skipmigrate"
        echo "        skips migration update"
        echo ""
        echo "    -e ENV, --env ENV"
        echo "        sets environment name ENV for init"
        echo ""
        echo "    -h, --help"
        echo "        this information (ignores other options)"
        echo ""
        echo "    -c, --config"
        echo "        creates deployer.cfg in current folder (ignores other options)"
        echo ""
        echo "    -u, --update"
        echo "        updates deployer using composer in global mode (ignores other options)"
        echo ""
        echo "AUTHOR"
        echo ""
        echo "    Pawel Bizley Brzozowski"
        echo ""
        echo "COPYRIGHT"
        echo ""
        echo "    Copyright (c) 2016-2017 Human Device Sp. z o.o., 2018 positive.codes"
        echo ""
    elif [[ ${MODE} -eq 2 ]]; then
        if [[ "$VERSION" = "" ]]; then
            echo "    Version tag missing."
            echo "    For help run"
            echo "        deployer -h"
        else
            DEPLOY
        fi
    elif [[ ${MODE} -eq 3 ]]; then
        if [[ "$VERSION" = "" ]]; then
            echo "    Version tag missing."
            echo "    For help run"
            echo "        deployer -h"
        else
            ROLLBACK
        fi
    elif [[ ${MODE} -eq 4 ]]; then
        echo "    You can not run deploy, rollback and development deploy at the same time."
        echo "    For help run"
        echo "        deployer -h"
    elif [[ ${MODE} -eq 5 ]]; then
        if [[ "$DEV_BRANCH" = "" ]]; then
            echo "    Branch missing."
            echo "    For help run"
            echo "        deployer -h"
        else
            DEPLOYDEV
        fi
    elif [[ ${MODE} -eq 99 ]]; then
        echo "    Unrecognised option."
        echo "    For help run"
        echo "        deployer -h"
    else
        echo "    Yii 2 project deployer."
        echo "    For help run"
        echo "        deployer -h"
    fi
}

while [[ $# -gt 0 ]]
do
    case $1 in
        -c|--config)
            MODE=6
            break
            ;;
        -u|--update)
            MODE=7
            break
            ;;
        -h|--help)
            MODE=1
            break
            ;;
        -v|--verbose)
            VERBOSE=1
            ;;
        -s|--skipmigrate)
            SKIP_MIG=1
            ;;
        -e|--env)
            ENV="$2"
            shift
            ;;
        -dev)
            if [[ ${MODE} -eq 2 ]]; then
                MODE=4
            elif [[ ${MODE} -eq 3 ]]; then
                MODE=4
            else
                MODE=5
            fi
            ;;
        -d|--deploy)
            if [[ ${MODE} -eq 5 ]]; then
                MODE=4
            elif [[ ${MODE} -eq 3 ]]; then
                MODE=4
            else
                MODE=2
            fi
            VERSION="$2"
            shift
            ;;
        -r|--rollback)
            if [[ ${MODE} -eq 5 ]]; then
                MODE=4
            elif [[ ${MODE} -eq 2 ]]; then
                MODE=4
            else
                MODE=3
            fi
            VERSION="$2"
            shift
            ;;
        -b|--branch)
            if [[ ${MODE} -eq 2 ]]; then
                MODE=4
            elif [[ ${MODE} -eq 3 ]]; then
                MODE=4
            else
                MODE=5
            fi
            DEV_BRANCH="$2"
            shift
            ;;
        *)
            MODE=99
            break
            ;;
    esac
    shift
done

START
